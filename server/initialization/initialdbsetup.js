const pool = require('../config/db');

// Initialize connection pool

const query = ` 
CREATE TYPE role_enum AS ENUM ('TPO','Student', 'Teacher', 'Department', 'President');
CREATE TYPE user_status AS ENUM ('NOTACTIVE', 'ACTIVE');
CREATE TYPE branch_enum AS ENUM ('CMPN', 'INFT', 'ECS', 'EXTC', 'ELEC');
CREATE TYPE year_enum AS ENUM ('FE', 'SE', 'TE', 'BE');
CREATE TYPE exam_status AS ENUM ('draft', 'scheduled', 'live', 'past');
CREATE TYPE response_status AS ENUM ('draft', 'submitted');
CREATE TYPE question_type_enum AS ENUM ('single_choice', 'multiple_choice', 'text', 'image');


CREATE TABLE users(
    user_id SERIAL PRIMARY KEY,
    name VARCHAR(50),
    email VARCHAR(50) UNIQUE,
    password_hash TEXT,
    role role_enum NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status user_status DEFAULT 'NOTACTIVE',
    department branch_enum,
    year year_enum,
    rollno INTEGER,
    phone VARCHAR(15) NULL
);

CREATE TABLE exams (
  exam_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  exam_name VARCHAR(30),
  created_by INTEGER,
  duration INTEGER,
  start_time TIMESTAMP,
  end_time TIMESTAMP,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  status exam_status DEFAULT 'draft'::exam_status,
  target_years year_enum[],
  target_branches branch_enum[],
  exam_for role_enum NOT NULL DEFAULT 'Student'::role_enum
);


CREATE TABLE questions (
  question_id SERIAL PRIMARY KEY,
  exam_id INTEGER,
  question_text TEXT,
  options JSONB,
  correct_option CHAR(1),
  category category_enum,
  question_type question_type_enum NOT NULL DEFAULT 'single_choice'::question_type_enum,
  correct_options JSONB,
  image_url TEXT
);

CREATE TABLE responses (
    response_id SERIAL PRIMARY KEY,
    student_id INTEGER REFERENCES users(user_id),
    exam_id INTEGER REFERENCES exams (exam_id),
    question_id INTEGER REFERENCES questions (question_id),
    selected_option CHAR(1) NULL,
    selected_options JSONB NULL,
    text_answer TEXT NULL,
    question_type question_type_enum NOT NULL,
    answered_at TIMESTAMP,
    status response_status DEFAULT 'draft'
);

CREATE TABLE responses (
  response_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  student_id INTEGER,
  exam_id INTEGER,
  question_id INTEGER,
  selected_option CHAR(1),
  answered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  status response_status DEFAULT 'draft'::response_status,
  selected_options JSONB,
  text_answer TEXT,
  question_type question_type_enum
);


CREATE TABLE results (
  result_id SERIAL PRIMARY KEY,
  student_id INTEGER,
  exam_id INTEGER,
  total_score INTEGER,
  max_score INTEGER,
  completed_at TIMESTAMP,
  category_score JSONB DEFAULT '{}'::jsonb
);

CREATE TABLE teacher_results (
    result_id SERIAL PRIMARY KEY,
    teacher_id INTEGER,
    exam_id INTEGER,
    question_id INTEGER, 
    marks_allotted INTEGER,  
    max_score INTEGER,
    comments TEXT,  
    completed_at TIMESTAMP,
    FOREIGN KEY (exam_id) REFERENCES exams (exam_id),
    FOREIGN KEY (teacher_id) REFERENCES users (user_id),
    FOREIGN KEY (question_id) REFERENCES questions (question_id),
    UNIQUE (exam_id, question_id, teacher_id) 
);


CREATE TABLE student_analysis (
  analysis_id SERIAL PRIMARY KEY,
  exam_id INTEGER,
  department_name branch_enum NOT NULL,
  student_id INTEGER,
  student_name VARCHAR(255),
  exam_name VARCHAR(255),
  total_score DOUBLE PRECISION NOT NULL,
  max_score DOUBLE PRECISION NOT NULL,
  attempted BOOLEAN DEFAULT false,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  category JSONB
);

CREATE TABLE student_ranks (
  rank_id SERIAL PRIMARY KEY,
  student_id INTEGER UNIQUE,
  student_name VARCHAR(255),
  department_name TEXT NOT NULL,
  year TEXT NOT NULL,
  total_score INTEGER NOT NULL,
  overall_rank INTEGER NOT NULL,
  department_rank INTEGER NOT NULL,
  last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE department_analysis (
  id SERIAL PRIMARY KEY,
  department_name VARCHAR(100) NOT NULL,
  year VARCHAR(10) NOT NULL,
  accuracy_rate DOUBLE PRECISION DEFAULT 0.0,
  subject_performance JSONB DEFAULT '{}'::jsonb,
  performance_over_time JSONB DEFAULT '[]'::jsonb,
  department_rank INTEGER,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  total_score DOUBLE PRECISION DEFAULT 0,
  max_score DOUBLE PRECISION DEFAULT 0,
  student_count INTEGER DEFAULT 0
);

`;

// Function to initialize the database schema
async function initializeDB() {
  try {
    const result = await pool.query(query);
    console.log(`Successfully Completed`);
  } catch (error) {
    console.log(error);
  }
}
initializeDB();

// Export query method and initialization function
//module.exports = { pool, initializeDB };
